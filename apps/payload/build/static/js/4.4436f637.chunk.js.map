{"version":3,"sources":["outpost/components/ui/layout/message/rendermodes/Form.tsx","outpost/components/ui/layout/message/rendermodes/JsonRender.tsx","outpost/components/ui/layout/message/rendermodes/Schema.tsx","outpost/components/ui/layout/message/OutpostCardMessageRenderer.tsx","outpost/components/ui/elements/OutpostMessageExecuteAmount.tsx","outpost/components/ui/messages/OutpostMessageExecute.tsx","outpost/hooks/useExecuteMessage.ts"],"names":["CustomFieldNode","formData","idSchema","onChange","isAmount","$id","indexOf","value","toInput","inputMode","e","target","FormRender","message","failMessage","updateMessage","useOutpostState","customField","StringField","error","schema","fields","parseJSON","JSON","stringify","type","style","display","href","rel","JsonRender","validateError","label","Schema","validateMsg","OutpostCardMessageRenderer","props","renderMode","ContractMessageRenderModes","FORM","Form","SCHEMA","OutpostMessageExecuteAmount","initialGasDenom","bankBalance","useBankBalance","coins","defaultItem","denom","size","maxWidth","marginBottom","onClick","fontSize","map","index","input","filter","_","idx","parseInt","placeholder","getPlaceholder","selectBefore","before","sortCoins","isDenomTerraNative","readDenom","OutpostMessageExecute","getContract","contract","contractId","msg","c","useMemo","contractAddress","address","useAddress","getInitialGasDenom","createTxInsta","useCallback","exec_msg","getCoins","msgs","MsgExecuteContract","estimationTxValues","tx","createTx","useExecuteMessage","TxContext","fee","submit","resultQuery","disabled","Fetching","render","marginTop","fn","color"],"mappings":"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","file":"static/js/4.4436f637.chunk.js","sourcesContent":["import { ContractMessage } from '@outp0st/core';\nimport Form from '@rjsf/core';\nimport { FormItem, Input } from 'components/form';\nimport { useOutpostState } from 'outpost/state/useOutpostState';\nimport { toInput } from 'txs/utils';\nimport { parseJSON } from 'utils/data';\n\ninterface FormRenderProps {\n  message: ContractMessage;\n  failMessage?: string | undefined;\n}\n\nconst CustomFieldNode = ({ formData, idSchema, onChange }: any) => {\n  //console.log({ formData, idSchema, schema });\n  const isAmount = (idSchema.$id as string).indexOf('amount') !== -1;\n  return (\n    <div>\n      <FormItem>\n        <Input\n          value={isAmount ? toInput(formData) : formData}\n          inputMode=\"decimal\"\n          onChange={e => {\n            onChange(e.target.value + '000000');\n          }}\n        />\n      </FormItem>\n    </div>\n  );\n};\n\nfunction FormRender({ message, failMessage }: FormRenderProps) {\n  const { updateMessage } = useOutpostState();\n\n  const customField = { StringField: CustomFieldNode };\n\n  return (\n    <div>\n      <FormItem\n        error={\n          message.schema && failMessage && `Sumulation error: ${failMessage}`\n        }\n      >\n        {message.schema && (\n          <Form\n            fields={customField}\n            schema={parseJSON(message.schema) as any}\n            formData={parseJSON(message.message || '')}\n            onChange={e =>\n              updateMessage({\n                ...message,\n                message: JSON.stringify(e.formData, null, 2),\n              })\n            }\n          >\n            <div>\n              <button type=\"submit\" style={{ display: 'none' }}>\n                Submit\n              </button>\n            </div>\n          </Form>\n        )}\n        {!message.schema && (\n          <div>\n            Please, provide schema for this message{' '}\n            <a\n              href=\"https://docs.cosmwasm.com/tutorials/simple-option/develop/#schema\"\n              rel=\"noreferrer\"\n              target=\"_blank\"\n            >\n              learn more...\n            </a>\n          </div>\n        )}\n      </FormItem>\n    </div>\n  );\n}\n\nexport default FormRender;\n","import { ContractMessage } from '@outp0st/core';\nimport { EditorInput, FormItem } from 'components/form';\nimport { useOutpostState } from 'outpost/state/useOutpostState';\n// import { parseJSON } from \"utils/data\"\n\ninterface JsonRenderProps {\n  message: ContractMessage;\n  failMessage?: string | undefined;\n  validateError?: string | undefined;\n}\n\n// function addNumbersToJsonString(noNumbersJsonString: string) {\n//   const parsed = parseJSON(noNumbersJsonString);\n\n// }\n\nfunction JsonRender({ message, failMessage, validateError }: JsonRenderProps) {\n  const { updateMessage } = useOutpostState();\n  let error: string = '';\n  if (validateError) error = `JSON error: ${validateError}`;\n  else if (failMessage) error = `Sumulation error: ${failMessage}`;\n  return (\n    <FormItem label=\"json msg\" error={error}>\n      <EditorInput\n        value={message.message}\n        onChange={e => {\n          updateMessage({ ...message, message: e.target.value });\n        }}\n      />\n    </FormItem>\n  );\n}\n\nexport default JsonRender;\n","import { ContractMessage } from '@outp0st/core';\nimport { EditorInput, FormItem } from 'components/form';\nimport { useOutpostState } from 'outpost/state/useOutpostState';\nimport { validateMsg } from 'outpost/utils';\n\ninterface SchemaProps {\n  message: ContractMessage;\n}\n\nfunction Schema({ message }: SchemaProps) {\n  const { updateMessage } = useOutpostState();\n  const validateError = validateMsg(message.schema || '{}');\n  let error = '';\n  if (validateError) error = `JSON error: ${validateError}`;\n  return (\n    <FormItem label=\"Schema\" error={error}>\n      <EditorInput\n        value={message.schema}\n        onChange={e => {\n          updateMessage({ ...message, schema: e.target.value });\n        }}\n      />\n    </FormItem>\n  );\n}\n\nexport default Schema;\n","import { ContractMessage, ContractMessageRenderModes } from '@outp0st/core';\nimport Form from './rendermodes/Form';\nimport JsonRender from './rendermodes/JsonRender';\nimport Schema from './rendermodes/Schema';\n\ninterface OutpostCardMessageRendererProps {\n  message: ContractMessage;\n  failMessage?: string | undefined;\n  validateError?: string | undefined;\n}\n\nfunction OutpostCardMessageRenderer(props: OutpostCardMessageRendererProps) {\n  switch (props.message.renderMode) {\n    case ContractMessageRenderModes.JSON:\n      return <JsonRender {...props} />;\n    case ContractMessageRenderModes.FORM:\n      return <Form {...props} />;\n    case ContractMessageRenderModes.SCHEMA:\n      return <Schema {...props} />;\n    default:\n      return <JsonRender {...props} />;\n  }\n}\n\nexport default OutpostCardMessageRenderer;\n","import AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport { ContractMessage } from '@outp0st/core';\nimport { isDenomTerraNative, readDenom } from '@terra.kitchen/utils';\nimport { FormGroup, FormItem, Input, Select } from 'components/form';\nimport { Button } from 'components/general';\nimport { useBankBalance } from 'data/queries/bank';\nimport { useOutpostState } from 'outpost/state/useOutpostState';\nimport { CoinInput, getPlaceholder } from 'txs/utils';\nimport { sortCoins } from 'utils/coin';\n\nexport interface OutpostMessageExecuteAmountProps {\n  message: ContractMessage;\n  initialGasDenom: any;\n}\n\nexport default function OutpostMessageExecuteAmount({\n  message,\n  initialGasDenom,\n}: OutpostMessageExecuteAmountProps) {\n  const bankBalance = useBankBalance();\n  const { updateMessage } = useOutpostState();\n  if (!message.coins) return <span></span>;\n  const coins = message.coins as CoinInput[];\n  const defaultItem = { denom: initialGasDenom };\n  return (\n    <FormItem label={'Coins to send'}>\n      <Button\n        size=\"small\"\n        style={{ maxWidth: '20px', marginBottom: '20px' }}\n        onClick={() => {\n          updateMessage({\n            ...message,\n            coins: [...message.coins!, { ...defaultItem }],\n          });\n        }}\n      >\n        <AddIcon style={{ fontSize: 18 }} />\n      </Button>\n      {message.coins?.map(({ denom, input }, index) => (\n        <FormGroup key={index}>\n          <Input\n            value={input}\n            inputMode=\"decimal\"\n            onChange={e => {\n              updateMessage({\n                ...message,\n                coins: [\n                  ...coins.filter((_, idx) => idx !== index)!,\n                  { denom, input: parseInt(e.target.value) },\n                ],\n              });\n            }}\n            placeholder={getPlaceholder()}\n            selectBefore={\n              <Select\n                value={denom}\n                onChange={e => {\n                  updateMessage({\n                    ...message,\n                    coins: [\n                      ...coins.filter((_, idx) => idx !== index)!,\n                      {\n                        denom: e.target.value,\n                        input: input,\n                      },\n                    ],\n                  });\n                }}\n                before\n              >\n                {sortCoins(bankBalance)\n                  .filter(({ denom }) => isDenomTerraNative(denom))\n                  .map(({ denom }) => (\n                    <option value={denom} key={denom}>\n                      {readDenom(denom)}\n                    </option>\n                  ))}\n              </Select>\n            }\n          />\n          <Button\n            size=\"small\"\n            style={{ maxWidth: '20px', marginBottom: '5px' }}\n            onClick={() => {\n              updateMessage({\n                ...message,\n                coins: [...coins.filter((_, idx) => idx !== index)!],\n              });\n            }}\n          >\n            <RemoveIcon style={{ fontSize: 18 }} />\n          </Button>\n        </FormGroup>\n      ))}\n    </FormItem>\n  );\n}\n","import { ContractMessage } from '@outp0st/core';\nimport { Button } from 'components/general';\nimport { useExecuteMessage } from 'outpost/hooks/useExecuteMessage';\nimport { validateMsg } from 'outpost/utils';\n// import Tx from \"txs/Tx\"\nimport TxContext from 'txs/TxContext';\nimport Tx from '../../Tx';\nimport Fetching from '../elements/Fetching';\nimport OutpostMessageExecuteAmount from '../elements/OutpostMessageExecuteAmount';\nimport OutpostCardMessageRenderer from '../layout/message/OutpostCardMessageRenderer';\n\n// import validate from 'txs/validate';\n\ninterface OutpostMessageExecuteProps {\n  message: ContractMessage;\n}\n\nexport default function OutpostMessageExecute({\n  message,\n}: OutpostMessageExecuteProps) {\n  const { tx } = useExecuteMessage(message);\n  const validateError = validateMsg(message.message || '');\n  return (\n    <TxContext>\n      <Tx {...tx}>\n        {({ fee, submit, failMessage, resultQuery, disabled }) => (\n          <Fetching {...resultQuery}>\n            <div>\n              <OutpostCardMessageRenderer\n                message={message}\n                failMessage={failMessage}\n                validateError={validateError}\n              />\n\n              <OutpostMessageExecuteAmount\n                message={message}\n                initialGasDenom={tx.initialGasDenom}\n              />\n              <div style={{ marginBottom: '20px' }}></div>\n              {fee.render()}\n              <Button\n                style={{ marginTop: '20px' }}\n                disabled={!!(validateError || !!disabled)}\n                onClick={() => submit.fn({})}\n                color=\"primary\"\n              >\n                Execute message\n              </Button>\n            </div>\n          </Fetching>\n        )}\n      </Tx>\n    </TxContext>\n  );\n}\n","import { Contract, ContractMessage } from '@outp0st/core';\nimport { MsgExecuteContract } from '@terra-money/terra.js';\nimport { useBankBalance } from 'data/queries/bank';\nimport { useAddress } from 'data/wallet';\nimport { useCallback, useMemo } from 'react';\nimport { getInitialGasDenom } from 'txs/Tx';\nimport { getCoins } from 'txs/utils';\nimport { parseJSON, validateMsg } from 'utils/data';\nimport { useOutpostState } from '../state/useOutpostState';\n\nexport function useExecuteMessage(message: ContractMessage): any {\n  const { getContract } = useOutpostState();\n  const bankBalance = useBankBalance();\n  const contract = getContract(message.contractId) as Contract;\n  //useUpdateAfterTx(contract, constType);\n  const msg = message.message;\n  const c = useMemo(() => {\n    return message.coins;\n  }, [message.coins]);\n  const { contractAddress } = contract;\n  const address = useAddress();\n\n  const initialGasDenom = getInitialGasDenom(bankBalance);\n  const createTxInsta = useCallback(() => {\n    const defaultItem = { input: 0, denom: initialGasDenom };\n    if (!address || !(contractAddress && msg)) return;\n    if (!validateMsg(msg)) return;\n    if (!defaultItem) return;\n\n    const exec_msg = parseJSON(msg);\n    const coins = getCoins(c || [defaultItem]);\n    //console.log({ coins });\n    const msgs = [\n      new MsgExecuteContract(address, contractAddress, exec_msg, coins),\n    ];\n\n    return { msgs };\n  }, [address, contractAddress, msg, initialGasDenom, c]);\n  const estimationTxValues = useMemo(\n    () => [msg, contractAddress],\n    [msg, contractAddress],\n  );\n  const createTx = createTxInsta;\n  const tx = {\n    initialGasDenom,\n    estimationTxValues,\n    createTx,\n  };\n\n  return { tx };\n}\n"],"sourceRoot":""}