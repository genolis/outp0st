{"version":3,"sources":["outpost/components/ui/layout/message/rendermodes/Form.tsx","outpost/components/ui/layout/message/rendermodes/JsonRender.tsx","outpost/components/ui/layout/message/rendermodes/Schema.tsx","outpost/components/ui/layout/message/OutpostCardMessageRenderer.tsx","outpost/components/ui/messages/OutpostMessageInsta.tsx","outpost/hooks/useInstaMessageStation.ts"],"names":["CustomFieldNode","formData","idSchema","onChange","isAmount","$id","indexOf","value","toInput","inputMode","e","target","FormRender","message","failMessage","updateMessage","useOutpostState","customField","StringField","error","schema","fields","parseJSON","JSON","stringify","type","style","display","href","rel","JsonRender","validateError","label","Schema","validateMsg","OutpostCardMessageRenderer","props","renderMode","ContractMessageRenderModes","FORM","Form","SCHEMA","OutpostMessageInsta","address","useAddress","bankBalance","useBankBalance","contract","getContract","contractId","useUpdateAfterTx","msg","id","codeId","initialGasDenom","getInitialGasDenom","createTx","useCallback","defaultItem","input","denom","code_id","Number","init_msg","coins","getCoins","msgs","MsgInstantiateContract","admin","estimationTxValues","useMemo","tx","useInstaMessageStation","updateContract","TxContext","Tx","fee","submit","resultQuery","disabled","Fetching","placeholder","render","marginTop","onClick","fn","color"],"mappings":"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","file":"static/js/5.7a598b7f.chunk.js","sourcesContent":["import { ContractMessage } from '@outp0st/core';\nimport Form from '@rjsf/core';\nimport { FormItem, Input } from 'components/form';\nimport { useOutpostState } from 'outpost/state/useOutpostState';\nimport { toInput } from 'txs/utils';\nimport { parseJSON } from 'utils/data';\n\ninterface FormRenderProps {\n  message: ContractMessage;\n  failMessage?: string | undefined;\n}\n\nconst CustomFieldNode = ({ formData, idSchema, onChange }: any) => {\n  //console.log({ formData, idSchema, schema });\n  const isAmount = (idSchema.$id as string).indexOf('amount') !== -1;\n  return (\n    <div>\n      <FormItem>\n        <Input\n          value={isAmount ? toInput(formData) : formData}\n          inputMode=\"decimal\"\n          onChange={e => {\n            onChange(e.target.value + '000000');\n          }}\n        />\n      </FormItem>\n    </div>\n  );\n};\n\nfunction FormRender({ message, failMessage }: FormRenderProps) {\n  const { updateMessage } = useOutpostState();\n\n  const customField = { StringField: CustomFieldNode };\n\n  return (\n    <div>\n      <FormItem\n        error={\n          message.schema && failMessage && `Sumulation error: ${failMessage}`\n        }\n      >\n        {message.schema && (\n          <Form\n            fields={customField}\n            schema={parseJSON(message.schema) as any}\n            formData={parseJSON(message.message || '')}\n            onChange={e =>\n              updateMessage({\n                ...message,\n                message: JSON.stringify(e.formData, null, 2),\n              })\n            }\n          >\n            <div>\n              <button type=\"submit\" style={{ display: 'none' }}>\n                Submit\n              </button>\n            </div>\n          </Form>\n        )}\n        {!message.schema && (\n          <div>\n            Please, provide schema for this message{' '}\n            <a\n              href=\"https://docs.cosmwasm.com/tutorials/simple-option/develop/#schema\"\n              rel=\"noreferrer\"\n              target=\"_blank\"\n            >\n              learn more...\n            </a>\n          </div>\n        )}\n      </FormItem>\n    </div>\n  );\n}\n\nexport default FormRender;\n","import { ContractMessage } from '@outp0st/core';\nimport { EditorInput, FormItem } from 'components/form';\nimport { useOutpostState } from 'outpost/state/useOutpostState';\n// import { parseJSON } from \"utils/data\"\n\ninterface JsonRenderProps {\n  message: ContractMessage;\n  failMessage?: string | undefined;\n  validateError?: string | undefined;\n}\n\n// function addNumbersToJsonString(noNumbersJsonString: string) {\n//   const parsed = parseJSON(noNumbersJsonString);\n\n// }\n\nfunction JsonRender({ message, failMessage, validateError }: JsonRenderProps) {\n  const { updateMessage } = useOutpostState();\n  let error: string = '';\n  if (validateError) error = `JSON error: ${validateError}`;\n  else if (failMessage) error = `Sumulation error: ${failMessage}`;\n  return (\n    <FormItem label=\"json msg\" error={error}>\n      <EditorInput\n        value={message.message}\n        onChange={e => {\n          updateMessage({ ...message, message: e.target.value });\n        }}\n      />\n    </FormItem>\n  );\n}\n\nexport default JsonRender;\n","import { ContractMessage } from '@outp0st/core';\nimport { EditorInput, FormItem } from 'components/form';\nimport { useOutpostState } from 'outpost/state/useOutpostState';\nimport { validateMsg } from 'outpost/utils';\n\ninterface SchemaProps {\n  message: ContractMessage;\n}\n\nfunction Schema({ message }: SchemaProps) {\n  const { updateMessage } = useOutpostState();\n  const validateError = validateMsg(message.schema || '{}');\n  let error = '';\n  if (validateError) error = `JSON error: ${validateError}`;\n  return (\n    <FormItem label=\"Schema\" error={error}>\n      <EditorInput\n        value={message.schema}\n        onChange={e => {\n          updateMessage({ ...message, schema: e.target.value });\n        }}\n      />\n    </FormItem>\n  );\n}\n\nexport default Schema;\n","import { ContractMessage, ContractMessageRenderModes } from '@outp0st/core';\nimport Form from './rendermodes/Form';\nimport JsonRender from './rendermodes/JsonRender';\nimport Schema from './rendermodes/Schema';\n\ninterface OutpostCardMessageRendererProps {\n  message: ContractMessage;\n  failMessage?: string | undefined;\n  validateError?: string | undefined;\n}\n\nfunction OutpostCardMessageRenderer(props: OutpostCardMessageRendererProps) {\n  switch (props.message.renderMode) {\n    case ContractMessageRenderModes.JSON:\n      return <JsonRender {...props} />;\n    case ContractMessageRenderModes.FORM:\n      return <Form {...props} />;\n    case ContractMessageRenderModes.SCHEMA:\n      return <Schema {...props} />;\n    default:\n      return <JsonRender {...props} />;\n  }\n}\n\nexport default OutpostCardMessageRenderer;\n","import { ContractMessage } from '@outp0st/core';\nimport { FormItem, Input } from 'components/form';\nimport { Button } from 'components/general';\nimport Tx from 'outpost/components/Tx';\nimport { useInstaMessageStation } from 'outpost/hooks/useInstaMessageStation';\nimport { useOutpostState } from 'outpost/state/useOutpostState';\nimport { validateMsg } from 'outpost/utils';\nimport TxContext from 'txs/TxContext';\nimport Fetching from '../elements/Fetching';\nimport OutpostCardMessageRenderer from '../layout/message/OutpostCardMessageRenderer';\n// import { Fetching } from 'components/feedback';\n// import Tx from 'txs/Tx';\n\ninterface OutpostMessageInstaProps {\n  message: ContractMessage;\n}\n\nexport default function OutpostMessageInsta({\n  message,\n}: OutpostMessageInstaProps) {\n  const { tx, contract } = useInstaMessageStation(message);\n  const validateError = validateMsg(message.message || '');\n  const { updateContract } = useOutpostState();\n\n  return (\n    <TxContext>\n      <Tx {...tx}>\n        {({ fee, submit, failMessage, resultQuery, disabled }) => (\n          <Fetching {...resultQuery}>\n            <FormItem label=\"admin\">\n              <Input\n                placeholder=\"Can be empty, admin will be sender\"\n                value={contract.admin}\n                onChange={e =>\n                  updateContract({\n                    ...contract,\n                    admin: e.target.value,\n                  })\n                }\n              />\n            </FormItem>\n            <div>\n              <OutpostCardMessageRenderer\n                message={message}\n                failMessage={failMessage}\n                validateError={validateError}\n              />\n\n              {fee.render()}\n              <Button\n                style={{ marginTop: '20px' }}\n                onClick={() => submit.fn({})}\n                color=\"primary\"\n                disabled={!!(validateError || !!disabled)}\n              >\n                Instantiate Contract\n              </Button>\n            </div>\n          </Fetching>\n        )}\n      </Tx>\n    </TxContext>\n  );\n}\n","import { Contract, ContractMessage } from '@outp0st/core';\nimport { MsgInstantiateContract } from '@terra-money/terra.js';\nimport { useBankBalance } from 'data/queries/bank';\nimport { useAddress } from 'data/wallet';\nimport { useCallback, useMemo } from 'react';\nimport { getInitialGasDenom } from 'txs/Tx';\nimport { getCoins } from 'txs/utils';\nimport { parseJSON, validateMsg } from 'utils/data';\nimport { useOutpostState } from '../state/useOutpostState';\nimport { useUpdateAfterTx } from './useUpdateAfterTx';\n// import { useDebounceCallback } from '@react-hook/debounce';\n\nexport function useInstaMessageStation(message: ContractMessage): any {\n  const address = useAddress();\n  const bankBalance = useBankBalance();\n  const { getContract } = useOutpostState();\n  const contract = getContract(message.contractId) as Contract;\n  useUpdateAfterTx(contract, 'INSTA');\n  const msg = message.message;\n  const id = contract.codeId;\n  /* tx context */\n  const initialGasDenom = getInitialGasDenom(bankBalance);\n\n  /* form */\n\n  /* tx */\n  const createTx = useCallback(() => {\n    const defaultItem = { input: 0, denom: initialGasDenom };\n    if (!address || !(id && msg)) return;\n    if (!validateMsg(msg)) return;\n\n    const code_id = Number(id);\n    const init_msg = parseJSON(msg);\n    // TODO add tokens\n    const coins = getCoins([defaultItem]);\n    const msgs = [\n      new MsgInstantiateContract(\n        address,\n        contract.admin || address,\n        code_id,\n        init_msg,\n        coins,\n      ),\n    ];\n\n    return { msgs };\n  }, [address, msg, id, initialGasDenom, contract.admin]);\n\n  /* fee */\n  const estimationTxValues = useMemo(() => [msg, id], [msg, id]);\n\n  const tx = {\n    initialGasDenom,\n    estimationTxValues,\n    createTx,\n  };\n\n  return {\n    tx,\n    contract,\n  };\n}\n"],"sourceRoot":""}