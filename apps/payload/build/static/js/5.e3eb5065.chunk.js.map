{"version":3,"sources":["outpost/components/ui/layout/message/rendermodes/Form.tsx","outpost/components/ui/layout/message/rendermodes/JsonRender.tsx","outpost/components/ui/layout/message/rendermodes/Schema.tsx","outpost/components/ui/layout/message/OutpostCardMessageRenderer.tsx","outpost/components/ui/messages/OutpostMessageExecuteMulti.tsx","outpost/hooks/useExecuteMessageCustom.ts"],"names":["CustomFieldNode","formData","idSchema","onChange","isAmount","$id","indexOf","value","toInput","inputMode","e","target","FormRender","message","failMessage","updateMessage","useOutpostState","customField","StringField","error","schema","fields","parseJSON","JSON","stringify","type","style","display","href","rel","JsonRender","validateError","label","Schema","validateMsg","OutpostCardMessageRenderer","props","renderMode","ContractMessageRenderModes","FORM","Form","SCHEMA","OutpostMessageExecuteMulti","createMessagesFn","getContract","bankBalance","useBankBalance","contract","contractId","msg","contractAddress","address","useAddress","initialGasDenom","getInitialGasDenom","createTxInsta","useCallback","defaultItem","input","denom","exec_msg","coins","getCoins","msgs","estimationTxValues","useMemo","tx","createTx","useExecuteMessageCustom","result","ContractMessageTypes","EXECUTE_MULTI","multiType","ContractExecuteMultiMessageTypes","TRANSFER_LUV","map","transferMsg","transfer","amount","recipient","MsgExecuteContract","SIMPLE","TxContext","fee","submit","resultQuery","disabled","Fetching","render","marginTop","onClick","fn","color"],"mappings":"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","file":"static/js/5.e3eb5065.chunk.js","sourcesContent":["import { ContractMessage } from '@outp0st/core';\nimport Form from '@rjsf/core';\nimport { FormItem, Input } from 'components/form';\nimport { useOutpostState } from 'outpost/state/useOutpostState';\nimport { toInput } from 'txs/utils';\nimport { parseJSON } from 'utils/data';\n\ninterface FormRenderProps {\n  message: ContractMessage;\n  failMessage?: string | undefined;\n}\n\nconst CustomFieldNode = ({ formData, idSchema, onChange }: any) => {\n  //console.log({ formData, idSchema, schema });\n  const isAmount = (idSchema.$id as string).indexOf('amount') !== -1;\n  return (\n    <div>\n      <FormItem>\n        <Input\n          value={isAmount ? toInput(formData) : formData}\n          inputMode=\"decimal\"\n          onChange={e => {\n            onChange(e.target.value + '000000');\n          }}\n        />\n      </FormItem>\n    </div>\n  );\n};\n\nfunction FormRender({ message, failMessage }: FormRenderProps) {\n  const { updateMessage } = useOutpostState();\n\n  const customField = { StringField: CustomFieldNode };\n\n  return (\n    <div>\n      <FormItem\n        error={\n          message.schema && failMessage && `Sumulation error: ${failMessage}`\n        }\n      >\n        {message.schema && (\n          <Form\n            fields={customField}\n            schema={parseJSON(message.schema) as any}\n            formData={parseJSON(message.message || '')}\n            onChange={e =>\n              updateMessage({\n                ...message,\n                message: JSON.stringify(e.formData, null, 2),\n              })\n            }\n          >\n            <div>\n              <button type=\"submit\" style={{ display: 'none' }}>\n                Submit\n              </button>\n            </div>\n          </Form>\n        )}\n        {!message.schema && (\n          <div>\n            Please, provide schema for this message{' '}\n            <a\n              href=\"https://docs.cosmwasm.com/tutorials/simple-option/develop/#schema\"\n              rel=\"noreferrer\"\n              target=\"_blank\"\n            >\n              learn more...\n            </a>\n          </div>\n        )}\n      </FormItem>\n    </div>\n  );\n}\n\nexport default FormRender;\n","import { ContractMessage } from '@outp0st/core';\nimport { EditorInput, FormItem } from 'components/form';\nimport { useOutpostState } from 'outpost/state/useOutpostState';\n// import { parseJSON } from \"utils/data\"\n\ninterface JsonRenderProps {\n  message: ContractMessage;\n  failMessage?: string | undefined;\n  validateError?: string | undefined;\n}\n\n// function addNumbersToJsonString(noNumbersJsonString: string) {\n//   const parsed = parseJSON(noNumbersJsonString);\n\n// }\n\nfunction JsonRender({ message, failMessage, validateError }: JsonRenderProps) {\n  const { updateMessage } = useOutpostState();\n  let error: string = '';\n  if (validateError) error = `JSON error: ${validateError}`;\n  else if (failMessage) error = `Sumulation error: ${failMessage}`;\n  return (\n    <FormItem label=\"json msg\" error={error}>\n      <EditorInput\n        value={message.message}\n        onChange={e => {\n          updateMessage({ ...message, message: e.target.value });\n        }}\n      />\n    </FormItem>\n  );\n}\n\nexport default JsonRender;\n","import { ContractMessage } from '@outp0st/core';\nimport { EditorInput, FormItem } from 'components/form';\nimport { useOutpostState } from 'outpost/state/useOutpostState';\nimport { validateMsg } from 'outpost/utils';\n\ninterface SchemaProps {\n  message: ContractMessage;\n}\n\nfunction Schema({ message }: SchemaProps) {\n  const { updateMessage } = useOutpostState();\n  const validateError = validateMsg(message.schema || '{}');\n  let error = '';\n  if (validateError) error = `JSON error: ${validateError}`;\n  return (\n    <FormItem label=\"Schema\" error={error}>\n      <EditorInput\n        value={message.schema}\n        onChange={e => {\n          updateMessage({ ...message, schema: e.target.value });\n        }}\n      />\n    </FormItem>\n  );\n}\n\nexport default Schema;\n","import { ContractMessage, ContractMessageRenderModes } from '@outp0st/core';\nimport Form from './rendermodes/Form';\nimport JsonRender from './rendermodes/JsonRender';\nimport Schema from './rendermodes/Schema';\n\ninterface OutpostCardMessageRendererProps {\n  message: ContractMessage;\n  failMessage?: string | undefined;\n  validateError?: string | undefined;\n}\n\nfunction OutpostCardMessageRenderer(props: OutpostCardMessageRendererProps) {\n  switch (props.message.renderMode) {\n    case ContractMessageRenderModes.JSON:\n      return <JsonRender {...props} />;\n    case ContractMessageRenderModes.FORM:\n      return <Form {...props} />;\n    case ContractMessageRenderModes.SCHEMA:\n      return <Schema {...props} />;\n    default:\n      return <JsonRender {...props} />;\n  }\n}\n\nexport default OutpostCardMessageRenderer;\n","import {\n  ContractExecuteMultiMessageTypes,\n  ContractMessage,\n  ContractMessageTypes,\n} from '@outp0st/core';\nimport { MsgExecuteContract } from '@terra-money/terra.js';\nimport { Button } from 'components/general';\nimport { useExecuteMessageCustom } from 'outpost/hooks/useExecuteMessageCustom';\nimport { validateMsg } from 'outpost/utils';\n// import Tx from \"txs/Tx\"\nimport TxContext from 'txs/TxContext';\nimport Tx from '../../Tx';\nimport Fetching from '../elements/Fetching';\nimport OutpostCardMessageRenderer from '../layout/message/OutpostCardMessageRenderer';\n// import validate from 'txs/validate';\n\ninterface OutpostMessageExecuteMultiProps {\n  message: ContractMessage;\n}\n\ninterface CW20TransferMsg {\n  transfer: {\n    amount: string;\n    recipient: string;\n  };\n}\n\nexport default function OutpostMessageExecuteMulti({\n  message,\n}: OutpostMessageExecuteMultiProps) {\n  const { tx } = useExecuteMessageCustom(\n    message,\n    (address, contractAddress, exec_msg, coins) => {\n      //console.log({ exec_msg });\n      let result: any[] = [];\n      if (\n        message.type === ContractMessageTypes.EXECUTE_MULTI &&\n        message.multiType === ContractExecuteMultiMessageTypes.TRANSFER_LUV\n      ) {\n        const msgs: Array<{ address: string; amount: string }> = exec_msg;\n        result = msgs.map(msg => {\n          const transferMsg: CW20TransferMsg = {\n            transfer: {\n              amount: msg.amount,\n              recipient: msg.address,\n            },\n          };\n          return new MsgExecuteContract(\n            address,\n            contractAddress,\n            transferMsg,\n            coins,\n          );\n        });\n      } else if (\n        message.type === ContractMessageTypes.EXECUTE_MULTI &&\n        message.multiType === ContractExecuteMultiMessageTypes.SIMPLE\n      ) {\n        const msgs: CW20TransferMsg[] = exec_msg;\n        result = msgs.map(msg => {\n          return new MsgExecuteContract(address, contractAddress, msg, coins);\n        });\n      }\n      //console.log({ result });\n      return result;\n    },\n  );\n  const validateError = validateMsg(message.message || '');\n  return (\n    <TxContext>\n      <Tx {...tx}>\n        {({ fee, submit, failMessage, resultQuery, disabled }) => (\n          <Fetching {...resultQuery}>\n            <OutpostCardMessageRenderer\n              message={message}\n              failMessage={failMessage}\n              validateError={validateError}\n            />\n\n            {fee.render()}\n            <Button\n              style={{ marginTop: '20px' }}\n              onClick={() => submit.fn({})}\n              disabled={!!(validateError || !!disabled)}\n              color=\"primary\"\n            >\n              Execute message\n            </Button>\n          </Fetching>\n        )}\n      </Tx>\n    </TxContext>\n  );\n}\n","import { Contract, ContractMessage } from '@outp0st/core';\nimport { Coins } from '@terra-money/terra.js';\nimport { useBankBalance } from 'data/queries/bank';\nimport { useAddress } from 'data/wallet';\nimport { useCallback, useMemo } from 'react';\nimport { getInitialGasDenom } from 'txs/Tx';\nimport { getCoins } from 'txs/utils';\nimport { parseJSON, validateMsg } from 'utils/data';\nimport { useOutpostState } from '../state/useOutpostState';\n\nexport function useExecuteMessageCustom(\n  message: ContractMessage,\n  createMessagesFn: (\n    address: string,\n    contractAddress: string,\n    exec_msg: any,\n    coins: Coins,\n  ) => any[],\n): any {\n  const { getContract } = useOutpostState();\n  const bankBalance = useBankBalance();\n  const contract = getContract(message.contractId) as Contract;\n  //useUpdateAfterTx(contract, constType);\n  const msg = message.message;\n  const { contractAddress } = contract;\n  const address = useAddress();\n\n  const initialGasDenom = getInitialGasDenom(bankBalance);\n  const createTxInsta = useCallback(() => {\n    const defaultItem = { input: 0, denom: initialGasDenom };\n    if (!address || !(contractAddress && msg)) return;\n    if (!validateMsg(msg)) return;\n    if (!defaultItem) return;\n\n    const exec_msg = parseJSON(msg);\n    const coins = getCoins([defaultItem]);\n    const msgs = createMessagesFn(address, contractAddress!, exec_msg, coins); //[new MsgExecuteContract(address, contractAddress!, exec_msg, coins)];\n\n    return { msgs };\n  }, [address, contractAddress, msg, initialGasDenom, createMessagesFn]);\n  const estimationTxValues = useMemo(\n    () => [msg, contractAddress],\n    [msg, contractAddress],\n  );\n  const createTx = createTxInsta;\n  const tx = {\n    initialGasDenom,\n    estimationTxValues,\n    createTx,\n  };\n\n  return { tx };\n}\n"],"sourceRoot":""}