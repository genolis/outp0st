{"version":3,"sources":["outpost/components/ui/messages/OutpostMessageQuery.tsx","outpost/hooks/useQueryMessage.ts"],"names":["OutpostMessageQuery","message","queryMsg","useOutpostState","getContract","updateMessage","contract","contractId","form","useForm","mode","defaultValues","msg","register","watch","handleSubmit","invalid","parseJSON","disabled","validateMsg","getContractQuery","useGetContractQuery","query","address","contractAddress","useQuery","enabled","isEmpty","retry","data","error","state","errorMessage","getErrorMessage","submit","parsed","JSON","stringify","useQueryMessage","onSubmit","label","undefined","placeholder","height","normal","submitting","isLoading"],"mappings":"+SAUe,SAASA,EAAT,GAEe,IAC5B,ECCK,SAAyBC,GAC9B,IAAMC,EAAWD,EAAQA,QACzB,EAAuCE,cAA/BC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,cACfC,EAAWF,EAAYH,EAAQM,YAE/BC,EAAOC,YAAgB,CAC3BC,KAAM,WACNC,cAAe,CACbC,IAAKV,KAGDW,EAAkCL,EAAlCK,SAAUC,EAAwBN,EAAxBM,MAAOC,EAAiBP,EAAjBO,aACjBH,EAAQE,IAARF,IACFI,EAAUJ,IAAQK,YAAUL,GAC5BM,GAAYC,YAAYP,GAGxBQ,EAAmBC,cAEnBC,EAAQpB,EACRqB,EAAO,OAAGjB,QAAH,IAAGA,OAAH,EAAGA,EAAUkB,gBAE1B,EAAkCC,mBAAS,2BACtCL,EAAyBG,EAASN,YAAUK,GAAS,QADhB,IAExCI,SAAUC,YAAQL,GAClBM,OAAO,KAHDC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAUC,EAAxB,iBAMMC,EAAeC,YAAgBH,GASrC,MAAO,CACLI,OAPa,SAAC,GAAqB,IAAnBtB,EAAkB,EAAlBA,IACVuB,EAASlB,YAAUL,GACrBuB,GACF9B,EAAc,2BAAKJ,GAAN,IAAeA,QAASmC,KAAKC,UAAUF,EAAQ,KAAM,OAKpEpB,eACAgB,QACAlB,WACAG,UACAa,OACA5B,UACAiB,WACAc,gBDtCEM,CAVuB,EAD3BrC,SAGE4B,EADF,EACEA,KACAX,EAFF,EAEEA,SACAH,EAHF,EAGEA,aACAgB,EAJF,EAIEA,MACAG,EALF,EAKEA,OACAF,EANF,EAMEA,aACAhB,EAPF,EAOEA,QACAH,EARF,EAQEA,SAGF,OACE,8BACE,cAAC,IAAD,2BAAckB,GAAd,aACE,eAAC,IAAD,CAAMQ,SAAUxB,EAAamB,GAA7B,UACE,cAAC,IAAD,CAAUM,MAAM,QAAQV,MAAOd,EAAU,oBAAiByB,EAA1D,SACE,cAAC,IAAD,2BACM5B,EAAS,QADf,IAEE6B,YAAY,2BAGdb,GAAQG,IACR,mCAGE,cAAC,IAAD,CAAUQ,MAAO,SAAjB,SACE,cAAC,IAAD,CAAKG,OAAQ,IAAKC,SAAUZ,EAA5B,gBACGA,QADH,IACGA,IAAgBH,QAKzB,cAAC,IAAD,CAAQX,SAAUA,EAAU2B,WAAYd,EAAMe","file":"static/js/7.5c959aed.chunk.js","sourcesContent":["import { ContractMessage } from '@outp0st/core';\nimport { Fetching } from 'components/feedback';\nimport { EditorInput, Form, FormItem, Submit } from 'components/form';\nimport { Pre } from 'components/general';\nimport { useQueryMessage } from 'outpost/hooks/useQueryMessage';\n\ninterface OutpostMessageQueryProps {\n  message: ContractMessage;\n}\n\nexport default function OutpostMessageQuery({\n  message,\n}: OutpostMessageQueryProps) {\n  const {\n    data,\n    disabled,\n    handleSubmit,\n    state,\n    submit,\n    errorMessage,\n    invalid,\n    register,\n  } = useQueryMessage(message);\n  //console.log(data);\n  return (\n    <div>\n      <Fetching {...state}>\n        <Form onSubmit={handleSubmit(submit)}>\n          <FormItem label=\"Input\" error={invalid ? 'Invalid JSON' : undefined}>\n            <EditorInput\n              {...register('msg')}\n              placeholder='{\"token_info\": {}}'\n            />\n          </FormItem>\n          {(data || errorMessage) && (\n            <>\n              {/* <FormArrow /> */}\n\n              <FormItem label={'Output'}>\n                <Pre height={240} normal={!!errorMessage}>\n                  {errorMessage ?? data}\n                </Pre>\n              </FormItem>\n            </>\n          )}\n          <Submit disabled={disabled} submitting={state.isLoading} />\n        </Form>\n      </Fetching>\n    </div>\n  );\n}\n","import { Contract, ContractMessage } from '@outp0st/core';\nimport { useGetContractQuery } from 'data/queries/wasm';\nimport { isEmpty } from 'ramda';\nimport { useForm } from 'react-hook-form';\nimport { useQuery } from 'react-query';\nimport { parseJSON, validateMsg } from 'utils/data';\nimport { getErrorMessage } from 'utils/error';\nimport { useOutpostState } from '../state/useOutpostState';\n\ninterface Values {\n  msg: string;\n}\n\n// https://stackoverflow.com/questions/62759505/typescript-ts7053-element-implicitly-has-an-any-type-because-expression\nexport function useQueryMessage(message: ContractMessage) {\n  const queryMsg = message.message;\n  const { getContract, updateMessage } = useOutpostState();\n  const contract = getContract(message.contractId) as Contract;\n  /* form */\n  const form = useForm<Values>({\n    mode: 'onChange',\n    defaultValues: {\n      msg: queryMsg,\n    },\n  });\n  const { register, watch, handleSubmit } = form;\n  const { msg } = watch();\n  const invalid = msg && !parseJSON(msg);\n  const disabled = !validateMsg(msg);\n\n  /* query */\n  const getContractQuery = useGetContractQuery();\n\n  const query = queryMsg;\n  const address = contract?.contractAddress;\n\n  const { data, error, ...state } = useQuery({\n    ...getContractQuery<object>(address, parseJSON(query || '{}')),\n    enabled: !isEmpty(query),\n    retry: false,\n  });\n\n  const errorMessage = getErrorMessage(error);\n\n  /* submit */\n  const submit = ({ msg }: Values) => {\n    const parsed = parseJSON(msg);\n    if (parsed)\n      updateMessage({ ...message, message: JSON.stringify(parsed, null, 2) });\n  };\n\n  return {\n    submit,\n    handleSubmit,\n    state,\n    register,\n    invalid,\n    data,\n    message,\n    disabled,\n    errorMessage,\n  };\n}\n"],"sourceRoot":""}